// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Game
model Game {
  id        Int       @id
  moves     Int
  title     String
  blackTime Int?      @map("black_time")
  whiteTime Int?      @map("white_time")
  location  String?
  kif       String?
  date      String
  timeLimit Int       @map("time_limit")
  startTime DateTime  @map("start_time")
  endTime   DateTime? @map("end_time")
  blackId   String    @map("black_id")
  whiteId   String    @map("white_id")
  blackRank String    @map("black_rank")
  whiteRank String    @map("white_rank")
  black     Player    @relation("black_games", fields: [blackId], references: [name], onDelete: Cascade)
  white     Player    @relation("white_games", fields: [whiteId], references: [name], onDelete: Cascade)
  tags      Tag[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([title])
  @@map("games")
}

// Tag
model Tag {
  name      String   @id
  games     Game[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

// Player
model Player {
  name String @id

  blackGames Game[]   @relation("black_games")
  whiteGames Game[]   @relation("white_games")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("players")
}
